{% extends 'html.html.twig' %}

{% set head_title = 'Authorization Server | AuthBucket\\OAuth2' %}

{% block page %}
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3 id="parameters">Parameters</h3>
                <p>The bundled <a href="https://github.com/authbucket/oauth2-php/blob/master/src/AuthBucket/OAuth2/Provider/AuthBucketOAuth2ServiceProvider.php">AuthBucketOAuth2ServiceProvider</a> come with following parameters:</p>
                <ul>
                    <li><code>authbucket_oauth2.model</code>: (Optional) Override this with your own model classes, default with in-memory AccessToken for using resource firewall with remote debug endpoint.</li>
                    <li><code>authbucket_oauth2.model_manager.factory</code>: (Optional) Override this with your backend model managers, e.g. Doctrine ORM EntityRepository, default with in-memory implementation for using resource firewall with remote debug endpoint.</li>
                    <li><code>authbucket_oauth2.user_provider</code>: (Optional) For using <code>grant_type = password</code>, override this parameter with your own user provider, e.g. using InMemoryUserProvider or a Doctrine ORM EntityRepository that implements UserProviderInterface.</li>
                </ul>

                <h3 id="services">Services</h3>
                <p>The bundled <a href="https://github.com/authbucket/oauth2-php/blob/master/src/AuthBucket/OAuth2/Provider/AuthBucketOAuth2ServiceProvider.php">AuthBucketOAuth2ServiceProvider</a> come with following services controller which simplify the OAuth2.0 controller implementation overhead:</p>
                <ul>
                    <li><code>authbucket_oauth2.oauth2_controller</code>: OAuth2 endpoint controller.</li>
                </ul>
                <p>Moreover, we also provide following model <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> controller for alter raw data set:</p>
                <ul>
                    <li><code>authbucket_oauth2.authorize_controller</code>: Authorize endpoint controller.</li>
                    <li><code>authbucket_oauth2.client_controller</code>: Client endpoint controller.</li>
                    <li><code>authbucket_oauth2.scope_controller</code>: Scope endpoint controller.</li>
                </ul>

                <h3 id="registering">Registering</h3>
                <p>If you are using <a href="http://silex.sensiolabs.org/">Silex</a>, register <a href="https://github.com/authbucket/oauth2-php/blob/master/src/AuthBucket/OAuth2/Provider/AuthBucketOAuth2ServiceProvider.php">AuthBucketOAuth2ServiceProvider</a> as below:</p>
<pre><code class="php">$app-&gt;register(new AuthBucket\OAuth2\Provider\AuthBucketOAuth2ServiceProvider());</code></pre>
                <p>Moreover, enable following service providers if that's not already the case:</p>
<pre><code class="php">$app-&gt;register(new Silex\Provider\SecurityServiceProvider());
$app-&gt;register(new Silex\Provider\SerializerServiceProvider());
$app-&gt;register(new Silex\Provider\ServiceControllerServiceProvider());
$app-&gt;register(new Silex\Provider\ValidatorServiceProvider());</code></pre>

                <h2 id="usage" class="page-header">Usage</h2>
                <p class="lead">This library seperate the endpoint logic in frontend firewall and backend controlle
                    r point of view, so you will need to setup both for functioning.</p>
                <p>To enable the built-in controller with corresponding routing, you need to mount it with a shared
                    provider instance, all above controllers will be enabled accordingly with routing prefix <code>/api</code>:</p>
<pre><code class="php">$provider = new AuthBucket\OAuth2\Provider\AuthBucketOAuth2ServiceProvider();
$app-&gt;register($provider);
$app-&gt;mount(&#39;/&#39;, $provider);</code></pre>
                        <p>Below is a list of recipes that cover some common use cases.</p>

                        <h3 id="authorization-endpoint">Authorization Endpoint</h3>
                        <p>We don't provide custom firewall for this endpoint, which you should protect it by yourself, aut
                            henticate and capture the user credential, e.g. by <a href="http://silex.sensiolabs.org/doc/providers/se
                                curity.html">SecurityServiceProvider</a>:</p>
<pre><code class="php">$app[&#39;security.encoder.digest&#39;] = $app-&gt;share(function ($app) {
    return new PlaintextPasswordEncoder();
});

$app[&#39;security.user_provider.default&#39;] = $app[&#39;security.user_provider.inmemory._proto&#39;](array(
    &#39;demousername1&#39; =&gt; array(&#39;ROLE_USER&#39;, &#39;demopassword1&#39;),
    &#39;demousername2&#39; =&gt; array(&#39;ROLE_USER&#39;, &#39;demopassword2&#39;),
    &#39;demousername3&#39; =&gt; array(&#39;ROLE_USER&#39;, &#39;demopassword3&#39;),
));

$app[&#39;security.firewalls&#39;] = array(
    &#39;oauth2_authorize&#39; =&gt; array(
        &#39;pattern&#39; =&gt; &#39;^/api/oauth2/authorize$&#39;,
        &#39;http&#39; =&gt; true,
        &#39;users&#39; =&gt; $app[&#39;security.user_provider.default&#39;],
    ),
);</code></pre>

                                <h3 id="token-endpoint">Token Endpoint</h3>
                                <p>Similar as authorization endpoint, we need to protect this endpoint with our custom firewall <code>oauth2_token</code>:</p>
<pre><code class="php">$app[&#39;security.firewalls&#39;] = array(
    &#39;oauth2_token&#39; =&gt; array(
        &#39;pattern&#39; =&gt; &#39;^/api/oauth2/token$&#39;,
        &#39;oauth2_token&#39; =&gt; true,
    ),
);</code></pre>
                                <h3 id="debug-endpoint">Debug Endpoint</h3>
                                <p>We should protect this endpoint with our custom firewall <code>oauth2_resource</code>:</p>
<pre><code class="php">$app[&#39;security.firewalls&#39;] = array(
   &#39;oauth2_debug&#39; =&gt; array(
       &#39;pattern&#39; =&gt; &#39;^/api/oauth2/debug$&#39;,
       &#39;oauth2_resource&#39; =&gt; true,
   ),
);</code></pre>

                                <h3 id="resource-endpoint">Resource Endpoint</h3>
                                <p>We don't provide other else resource endpoint controller implementation besides above debug endpoint. You should consider implement your own endpoint with custom logic, e.g. fetching user email address or profile image.</p>
                                <p>On the other hand, you can protect your resource server endpoint with our custom firewall <code>oauth2_resource</code>. Shorthand version (default assume resource server bundled with authorization server, query local model manager, without scope protection):</p>
<pre><code class="php">$app[&#39;security.firewalls&#39;] = array(
    &#39;resource&#39; =&gt; array(
        &#39;pattern&#39; =&gt; &#39;^/api/resource&#39;,
        &#39;oauth2_resource&#39; =&gt; true,
    ),
);</code></pre>
                                <p>Longhand version (assume resource server bundled with authorization server, query local model manager, protect with scope <code>demoscope1</code>):</p>
<pre><code class="php">$app[&#39;security.firewalls&#39;] = array(
    &#39;resource&#39; =&gt; array(
        &#39;pattern&#39; =&gt; &#39;^/api/resource&#39;,
        &#39;oauth2_resource&#39; =&gt; array(
            &#39;resource_type&#39; =&gt; &#39;model&#39;,
            &#39;scope&#39; =&gt; array(&#39;demoscope1&#39;),
        ),
    ),
);</code></pre>
                                <p>If authorization server is hosting somewhere else, you can protect your local resource endpoint by query remote authorization server debug endpoint:</p>
<pre><code class="php">$app[&#39;security.firewalls&#39;] = array(
    &#39;resource&#39; =&gt; array(
        &#39;pattern&#39; =&gt; &#39;^/api/resource&#39;,
        &#39;oauth2_resource&#39; =&gt; array(
        &#39;resource_type&#39; =&gt; &#39;debug_endpoint&#39;,
        &#39;scope&#39; =&gt; array(&#39;demoscope1&#39;),
        &#39;options&#39; =&gt; array(
            &#39;debug_endpoint&#39; =&gt; &#39;http://example.com/api/oauth2/debug&#39;,
            &#39;cache&#39; =&gt; true,
        ),
    ),
);</code></pre>

                                <h1 id="authorization-server" class="page-header">Authorization Server</h1>
                                <blockquote>
                                    <p>The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.</p>
                                    <footer><a href="http://tools.ietf.org/html/rfc6749#section-1.1">1.1. Roles</a></footer>
                                </blockquote>
                                <p class="lead">Authorization server's endpoints usually without GUI, but just RESTful API interface. Read though <a href="https://github.com/authbucket/oauth2-php/blob/master/tests/AuthBucket/OAuth2/Tests/TestBundle/Resources/config/routing_oauth2.php">routing_oauth2.php</a> to see how we implement it.</p>

                                <h2 id="protocol-endpoints" class="page-header">Protocol Endpoints</h2>
                                <blockquote>
                                    <p>The authorization process utilizes two authorization server endpoints (HTTP resources):</p>
                                    <footer><a href="http://tools.ietf.org/html/rfc6749#section-3">3. Protocol Endpoints</a></footer>
                                </blockquote>

                                <h3 id="authorization-endpoint-oauth2authorize-and-oauth2authorizehttp">Authorization Endpoint <small>(<code>/api/oauth2/authorize</code> and <code>/oauth2/authorize</code>)</small></h3>
                                <blockquote>
                                    <p>The authorization endpoint is used to interact with the resource owner and obtain an authorization grant.</p>
                                    <footer><a href="http://tools.ietf.org/html/rfc6749#section-3.1">3.1. Authorization Endpoint</a></footer>
                                </blockquote>
                                <p class="lead">Authorization endpoint (<a href="{{ path('api_oauth2_authorize') }}">HTTP Basic Authentication</a> and <a href="{{ path('demo_authorize') }}">Form-based Authentication</a>) are protected by Silex's <a href="http://silex.sensiolabs.org/doc/providers/security.html">SecurityServiceProvider</a> in this example. Read though <a href="https://github.com/authbucket/oauth2-php/blob/master/app/config/security.php">security.php</a> to see how we implement it.</p>
                                <p>Direct browser access is possible, authentication request will therefore triggered, and able to login with following testing account:</p>
                                <ul>
                                    <li>Username: <code>demousername1</code></li>
                                    <li>Password: <code>demopassword1</code></li>
                                </ul>
                                <p>After successful login, by default if access this endpoint without addition parameters, an error message <code>{&quot;error&quot;:&quot;invalid_request&quot;}</code> should be shown in JSON format.</p>

                                <h3 id="token-endpoint-oauth2token">Token Endpoint <small>(<code>/api/oauth2/token</code>)</small></h3>
                                <blockquote>
                                    <p>The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.</p>
                                    <footer><a href="http://tools.ietf.org/html/rfc6749#section-3.2">3.2. Token Endpoint</a></footer>
                                </blockquote>
                                <p class="lead"><a href="{{ path('api_oauth2_token') }}">Token endpoint</a> is protected by OAuth2's <a href="https://github.com/authbucket/oauth2-php/blob/master/src/AuthBucket/OAuth2/Provider/AuthBucketOAuth2ServiceProvider.php">AuthBucketOAuth2ServiceProvider</a> in this example. Read though <a href="https://github.com/authbucket/oauth2-php/blob/master/app/config/security.php">security.php</a> to see how we implement it.</p>
                                <p>By default this endpoint shouldn't access by browser directly with GET, else an error message <code>{&quot;error&quot;:&quot;invalid_request&quot;}</code> should be show in JSON format.</p>
                                <p>For debug purpose, may consider send out POST request to this endpoint by <a href="https://addons.mozilla.org/en-US/firefox/addon/httprequester/">HttpRequester</a>.</p>

                                <h2 id="additional-endpoints" class="page-header">Additional Endpoints</h2>
                                <p class="lead">Following endpoints are excluded from <a href="http://tools.ietf.org/html/rfc6749">RFC6749</a>, but live implementation should consider it.</p>

                                <h3 id="form-based-authentication-oauth2login">Form-based Authentication <small>(<code>/oauth2/login</code>)</small></h3>
                                <p class="lead"><a href="{{ path('demo_login') }}">Form-based Authentication</a> implemented by Silex's <a href="http://silex.sensiolabs.org/doc/providers/security.html">SecurityServiceProvider</a> in this example. Read though <a href="https://github.com/authbucket/oauth2-php/blob/master/tests/AuthBucket/OAuth2/Tests/TestBundle/Resources/config/routing_oauth2.php">routing_oauth2.php</a> and <a href="https://github.com/authbucket/oauth2-php/blob/master/tests/AuthBucket/OAuth2/Tests/TestBundle/Resources/views/oauth2/login.html.twig">login.html.twig</a> for more information.</p>
                                <p>This is used for protect above Authorization Endpoints.</p>

                                <h3 id="debug-endpoint-oauth2debug">Debug Endpoint <small>(<code>/api/oauth2/debug</code>)</small></h3>
                                <p class="lead"><a href="{{ path('api_oauth2_debug') }}">Debug Endpoint</a> clone the idea of <a href="https://developers.facebook.com/docs/facebook-login/access-tokens#debug">Facebook's Debug API Endpoint</a>, return raw information of corresponding <code>access_token</code> provided. Read though <a href="https://github.com/authbucket/oauth2-php/blob/master/app/config/security.php">security.php</a> and <a href="https://github.com/authbucket/oauth2-php/blob/master/tests/AuthBucket/OAuth2/Tests/TestBundle/Resources/config/routing_oauth2.php">routing_oauth2.php</a> for more information.</p>
                                <p>When working with an access token, you may need to check what information is associated with it, such as its user or expiry. To use this endpoint, you can issue a GET/POST request, e.g.:</p>
<pre><code class="http">GET /api/oauth2/debug?access_token={access_token} HTTP/1.1
Host: server.example.com</code></pre>
                                <ul>
                                    <li><code>access_token</code>: the access token you want to get information about</li>
                                </ul>
                                <p>The response of the API call is a JSON array containing a map of fields. For example:</p>
<pre><code class="json">{
    &quot;access_token&quot;: &quot;5dc0bdbb2f66a842cb46a02b6d559131&quot;,
    &quot;client_id&quot;: &quot;authorization_code_grant&quot;,
    &quot;expires&quot;: 1404641243,
    &quot;scope&quot;: [
        &quot;demoscope1&quot;
    ],
    &quot;token_type&quot;: &quot;bearer&quot;,
    &quot;username&quot;: &quot;demousername1&quot;
}</code></pre>
                                <p>Remote resource server may also utilize this debug endpoint to verfiy the supplied access token.</p>

                                <h3 id="crud-endpoints-apiv1.0authorize-apiv1.0client-and-apiv1.0scope">CRUD Endpoints <small>(<code>/api/authorize</code>, <code>/api/client</code> and <code>/api/scope</code>)</small></h3>
                                <p><a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD Endpoints</a> provide APIs for accessing raw data set in <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful API</a> style, with <a href="http://en.wikipedia.org/wiki/JSON">JSON</a> or <a href="http://en.wikipedia.org/wiki/XML">XML</a> request/response format, e.g:</p>
<pre><code class="no-highlight">POST   /api/scope.json        create a new scope
GET    /api/scope[/:id].json  get the scope specified by id
PUT    /api/scope[/:id].json  update a scope
DELETE /api/scope[/:id].json  delete the scope specified by id
GET    /api/scope.json        get the entire list of scopes</code></pre>
                                <p>In this demo we protect these CRUD Endpoints with our own <code>oauth2_resource</code> firewall rule, so you may issue a GET request for fetching first scope as below:</p>
<pre><code class="http">GET /api/scope/1.json?access_token={access_token} HTTP/1.1
Host: server.example.com</code></pre>
                                <p>The response of the API call is in JSON array, for example:</p>
<pre><code class="json">{
    &quot;id&quot;: 1,
    &quot;scope&quot;: &quot;demoscope1&quot;
}</code></pre>
                            </div>
                        </div>
                    </div>
                {% endblock %}
